# targ <- "is.premium"
# # set the predictors
# preds <- c("carat", "depth", "table", "price", "x", "y", "z", "clarity", "color")
#
# training_data <- data[1:52000,]
# test_data <- data[52001:nrow(data),]
#
# colnames(training_data)
k_cross_validation <- function(k, data, target, predictor_names, percent_predictors, percent_obs, num_trees,
complex_param, min_split, min_bucket, max_depth) {
parts = split(data, sample(1:k, nrow(data), replace=T))
count_correct = 0
count_incorrect = 0
for(i in 1:k) {
test_data = parts[[i]]
training_data = c();
for(j in 1:k) {
if(j != i) {
training_data = rbind(training_data, parts[[j]])
}
}
rf <- rpartRF(training_data, targ, preds, 0.7, 1, ntrees, 0.005, 20, 3, 30)
data_with_pred = predictRF(rf, test_data)
results = checkRF(data_with_pred)
count_correct = count_correct + results[[1]]
count_incorrect = count_incorrect + results[[2]]
}
print(count_correct)
print(count_incorrect)
goodness = count_correct / (count_incorrect + count_correct)
print(goodness)
}
#IBM
percent = 0.8
data_file = "MartialStatus.csv"
all_data = read.csv(data_file, header = TRUE)
count = dim(all_data)[1]
s <-sample(count, floor(count * percent))
data_train <- all_data[s,]
data_test <- all_data[-s,]
targ <- "MaritalStatus"
# colnames(all_data)
preds <- c("ď.żAge","Attrition" ,"BusinessTravel","DailyRate","Department" ,"DistanceFromHome",
"Education","EducationField", "EmployeeCount", "EmployeeNumber", "EnvironmentSatisfaction",  "Gender"  ,
"HourlyRate","JobInvolvement","JobLevel", "JobRole", "JobSatisfaction", "MonthlyIncome", "MonthlyRate"   ,           "NumCompaniesWorked" ,
"Over18", "OverTime", "PercentSalaryHike", "PerformanceRating", "RelationshipSatisfaction", "StandardHours",
"StockOptionLevel", "TotalWorkingYears", "TrainingTimesLastYear", "WorkLifeBalance", "YearsAtCompany" ,          "YearsInCurrentRole",
"YearsSinceLastPromotion","YearsWithCurrManager")
preds <- c("ď.żAge","Attrition" ,"BusinessTravel","DailyRate","Department")
ntrees <- 1
rf <- rpartRF(data_train, targ, preds, 1, 1, ntrees, 0, 10, 3, 3, TRUE)
rf <- rpartRF(data_train, targ, preds, 1, ntrees, 0, 10, 3, 3)
levelList <- levels(all_data$MaritalStatus)
rpart.plot(rf[[1]])
data_with_pred = predictRF(rf, data_test, TRUE, levelList)
percent = 0.8
data_file = "MartialStatus.csv"
all_data = read.csv(data_file, header = TRUE)
count = dim(all_data)[1]
s <-sample(count, floor(count * percent))
data_train <- all_data[s,]
data_test <- all_data[-s,]
targ <- "MaritalStatus"
# colnames(all_data)
preds <- c("ď.żAge","Attrition" ,"BusinessTravel","DailyRate","Department" ,"DistanceFromHome",
"Education","EducationField", "EmployeeCount", "EmployeeNumber", "EnvironmentSatisfaction",  "Gender"  ,
"HourlyRate","JobInvolvement","JobLevel", "JobRole", "JobSatisfaction", "MonthlyIncome", "MonthlyRate"   ,           "NumCompaniesWorked" ,
"Over18", "OverTime", "PercentSalaryHike", "PerformanceRating", "RelationshipSatisfaction", "StandardHours",
"StockOptionLevel", "TotalWorkingYears", "TrainingTimesLastYear", "WorkLifeBalance", "YearsAtCompany" ,          "YearsInCurrentRole",
"YearsSinceLastPromotion","YearsWithCurrManager")
# preds <- c("ď.żAge","Attrition" ,"BusinessTravel","DailyRate","Department")
ntrees <- 1
rf <- rpartRF(data_train, targ, preds, 1, ntrees, 0, 10, 3, 10)
levelList <- levels(all_data$MaritalStatus)
levelList
rpart.plot(rf[[1]])
data_with_pred = predictRF(rf, data_test, TRUE, levelList)
rf[[1]]
predictRF <- function(random_forest, data, isClassification, levelList) {
# random_forest : list of trees to predict target
# data : data to do prediction on
# isClassyfication  : if target is class or distinct
all_predictions = c(data[1])
for(i in 1:length(rf)) {
prediction <- predict(random_forest[[i]], data)
prediction = round_df(prediction, 0)
# print(prediction)
all_predictions <- cbind(all_predictions, prediction)
}
all_predictions = all_predictions[-1]
print(all_predictions)
predicted_class = apply(all_predictions,1,function(x) names(which.max(table(x))))
# print(predicted_class)
# print(typeof(predicted_class))
data_to_return <- cbind(data, predicted_class)
if(isClassification) {
data_to_return$predicted_class <- levelList[data_to_return$predicted_class]
}
data_to_return
}
data_with_pred = predictRF(rf, data_test, TRUE, levelList)
length(rf)
# random_forest : list of trees to predict target
# data : data to do prediction on
# isClassyfication  : if target is class or distinct
all_predictions = c(data[1])
predictRF <- function(random_forest, data, isClassification, levelList) {
# random_forest : list of trees to predict target
# data : data to do prediction on
# isClassyfication  : if target is class or distinct
all_predictions = c(data[1])
for(i in 1:length(random_forest)) {
prediction <- predict(random_forest[[i]], data)
prediction = round_df(prediction, 0)
# print(prediction)
all_predictions <- cbind(all_predictions, prediction)
}
all_predictions = all_predictions[-1]
print(all_predictions)
predicted_class = apply(all_predictions,1,function(x) names(which.max(table(x))))
# print(predicted_class)
# print(typeof(predicted_class))
data_to_return <- cbind(data, predicted_class)
if(isClassification) {
data_to_return$predicted_class <- levelList[data_to_return$predicted_class]
}
data_to_return
}
data_with_pred = predictRF(rf, data_test, TRUE, levelList)
predictRF <- function(random_forest, data, isClassification, levelList) {
# random_forest : list of trees to predict target
# data : data to do prediction on
# isClassyfication  : if target is class or distinct
all_predictions = c(data[1])
for(i in 1:length(random_forest)) {
prediction <- predict(random_forest[[i]], data)
prediction = round_df(prediction, 0)
# print(prediction)
all_predictions <- cbind(all_predictions, prediction)
}
all_predictions = all_predictions[-1]
# print(all_predictions)
predicted_class = apply(all_predictions,1,function(x) names(which.max(table(x))))
# print(predicted_class)
# print(typeof(predicted_class))
data_to_return <- cbind(data, predicted_class)
if(isClassification) {
data_to_return$predicted_class <- levelList[data_to_return$predicted_class]
}
data_to_return
}
data_with_pred = predictRF(rf, data_test, TRUE, levelList)
predictRF <- function(random_forest, data, isClassification, levelList) {
# random_forest : list of trees to predict target
# data : data to do prediction on
# isClassyfication  : if target is class or distinct
all_predictions = c(data[1])
for(i in 1:length(random_forest)) {
prediction <- predict(random_forest[[i]], data)
prediction = round_df(prediction, 0)
# print(prediction)
all_predictions <- cbind(all_predictions, prediction)
}
print(dim(all_predictions))
all_predictions = all_predictions[-1]
# print(all_predictions)
predicted_class = apply(all_predictions,1,function(x) names(which.max(table(x))))
# print(predicted_class)
# print(typeof(predicted_class))
data_to_return <- cbind(data, predicted_class)
if(isClassification) {
data_to_return$predicted_class <- levelList[data_to_return$predicted_class]
}
data_to_return
}
percent = 0.8
data_file = "MartialStatus.csv"
all_data = read.csv(data_file, header = TRUE)
count = dim(all_data)[1]
s <-sample(count, floor(count * percent))
data_train <- all_data[s,]
data_test <- all_data[-s,]
targ <- "MaritalStatus"
# colnames(all_data)
preds <- c("ď.żAge","Attrition" ,"BusinessTravel","DailyRate","Department" ,"DistanceFromHome",
"Education","EducationField", "EmployeeCount", "EmployeeNumber", "EnvironmentSatisfaction",  "Gender"  ,
"HourlyRate","JobInvolvement","JobLevel", "JobRole", "JobSatisfaction", "MonthlyIncome", "MonthlyRate"   ,           "NumCompaniesWorked" ,
"Over18", "OverTime", "PercentSalaryHike", "PerformanceRating", "RelationshipSatisfaction", "StandardHours",
"StockOptionLevel", "TotalWorkingYears", "TrainingTimesLastYear", "WorkLifeBalance", "YearsAtCompany" ,          "YearsInCurrentRole",
"YearsSinceLastPromotion","YearsWithCurrManager")
# preds <- c("ď.żAge","Attrition" ,"BusinessTravel","DailyRate","Department")
ntrees <- 1
rf <- rpartRF(data_train, targ, preds, 1, ntrees, 0, 10, 3, 10)
levelList <- levels(all_data$MaritalStatus)
rpart.plot(rf[[1]])
rf[[1]]
data_with_pred = predictRF(rf, data_test, TRUE, levelList)
all_predictions
ntrees <- 2
rf <- rpartRF(data_train, targ, preds, 1, ntrees, 0, 10, 3, 10)
levelList <- levels(all_data$MaritalStatus)
rpart.plot(rf[[1]])
rf[[1]]
data_with_pred = predictRF(rf, data_test, TRUE, levelList)
predictRF <- function(random_forest, data, isClassification, levelList) {
# random_forest : list of trees to predict target
# data : data to do prediction on
# isClassyfication  : if target is class or distinct
all_predictions = c(data[1])
for(i in 1:length(random_forest)) {
prediction <- predict(random_forest[[i]], data)
prediction = round_df(prediction, 0)
# print(prediction)
all_predictions <- cbind(all_predictions, prediction)
}
print(dim(all_predictions[1]))
all_predictions = all_predictions[-1]
# print(all_predictions)
predicted_class = apply(all_predictions, 1, function(x) names(which.max(table(x))))
# print(predicted_class)
# print(typeof(predicted_class))
data_to_return <- cbind(data, predicted_class)
if(isClassification) {
data_to_return$predicted_class <- levelList[data_to_return$predicted_class]
}
data_to_return
}
data_with_pred = predictRF(rf, data_test, TRUE, levelList)
predictRF <- function(random_forest, data, isClassification, levelList) {
# random_forest : list of trees to predict target
# data : data to do prediction on
# isClassyfication  : if target is class or distinct
all_predictions = c(data[1])
for(i in 1:length(random_forest)) {
prediction <- predict(random_forest[[i]], data)
prediction = round_df(prediction, 0)
# print(prediction)
all_predictions <- cbind(all_predictions, prediction)
}
print(all_predictions)
all_predictions = all_predictions[-1]
# print(all_predictions)
predicted_class = apply(all_predictions, 1, function(x) names(which.max(table(x))))
# print(predicted_class)
# print(typeof(predicted_class))
data_to_return <- cbind(data, predicted_class)
if(isClassification) {
data_to_return$predicted_class <- levelList[data_to_return$predicted_class]
}
data_to_return
}
ntrees <- 2
rf <- rpartRF(data_train, targ, preds, 1, ntrees, 0, 10, 3, 10)
levelList <- levels(all_data$MaritalStatus)
rpart.plot(rf[[1]])
rf[[1]]
data_with_pred = predictRF(rf, data_test, TRUE, levelList)
predictRF <- function(random_forest, data, isClassification, levelList) {
# random_forest : list of trees to predict target
# data : data to do prediction on
# isClassyfication  : if target is class or distinct
all_predictions = c(data[1])
for(i in 1:length(random_forest)) {
prediction <- predict(random_forest[[i]], data)
prediction = round_df(prediction, 0)
# print(prediction)
all_predictions <- cbind(all_predictions, prediction)
}
all_predictions = all_predictions[-1]
print(all_predictions)
# print(all_predictions)
predicted_class = apply(all_predictions, 1, function(x) names(which.max(table(x))))
# print(predicted_class)
# print(typeof(predicted_class))
data_to_return <- cbind(data, predicted_class)
if(isClassification) {
data_to_return$predicted_class <- levelList[data_to_return$predicted_class]
}
data_to_return
}
data_with_pred = predictRF(rf, data_test, TRUE, levelList)
data_with_pred = predictRF(rf, data_test, TRUE, levelList)
length(rf)
predictRF <- function(random_forest, data, isClassification, levelList) {
# random_forest : list of trees to predict target
# data : data to do prediction on
# isClassyfication  : if target is class or distinct
all_predictions = c(data[1])
for(i in 1:length(random_forest)) {
prediction <- predict(random_forest[[i]], data)
prediction = round_df(prediction, 0)
# print(prediction)
all_predictions <- cbind(all_predictions, prediction)
}
print(all_predictions)
all_predictions = all_predictions[-1]
print(all_predictions)
# print(all_predictions)
predicted_class = apply(all_predictions, 1, function(x) names(which.max(table(x))))
# print(predicted_class)
# print(typeof(predicted_class))
data_to_return <- cbind(data, predicted_class)
if(isClassification) {
data_to_return$predicted_class <- levelList[data_to_return$predicted_class]
}
data_to_return
}
data_with_pred = predictRF(rf, data_test, TRUE, levelList)
predictRF <- function(random_forest, data, isClassification, levelList) {
# random_forest : list of trees to predict target
# data : data to do prediction on
# isClassyfication  : if target is class or distinct
all_predictions = c(data[1])
for(i in 1:length(random_forest)) {
prediction <- predict(random_forest[[i]], data)
prediction = round_df(prediction, 0)
# print(prediction)
all_predictions <- cbind(all_predictions, prediction)
}
print(all_predictions)
all_predictions = all_predictions[-1]
# print(all_predictions)
# print(all_predictions)
predicted_class = apply(all_predictions, 1, function(x) names(which.max(table(x))))
# print(predicted_class)
# print(typeof(predicted_class))
data_to_return <- cbind(data, predicted_class)
if(isClassification) {
data_to_return$predicted_class <- levelList[data_to_return$predicted_class]
}
data_to_return
}
data_with_pred = predictRF(rf, data_test, TRUE, levelList)
preds <- c("ď.żAge","Attrition" ,"BusinessTravel","DailyRate","Department" ,"DistanceFromHome",
"Education","EducationField", "EmployeeCount", "EmployeeNumber", "EnvironmentSatisfaction",  "Gender"  ,
"HourlyRate","JobInvolvement","JobLevel", "JobRole", "JobSatisfaction", "MonthlyIncome", "MonthlyRate"   ,           "NumCompaniesWorked" ,
"Over18", "OverTime", "PercentSalaryHike", "PerformanceRating", "RelationshipSatisfaction", "StandardHours",
"StockOptionLevel", "TotalWorkingYears", "TrainingTimesLastYear", "WorkLifeBalance", "YearsAtCompany" ,          "YearsInCurrentRole",
"YearsSinceLastPromotion","YearsWithCurrManager")
rf <- rpartRF(data_train, targ, preds, 1, ntrees, 0, 10, 3, 10)
length(rf)
levelList <- levels(all_data$MaritalStatus)
levelList
data_with_pred = predictRF(rf, data_test, TRUE, levelList)
predictRF <- function(random_forest, data, isClassification, levelList) {
# random_forest : list of trees to predict target
# data : data to do prediction on
# isClassyfication  : if target is class or distinct
all_predictions = c(data[1])
for(i in 1:length(random_forest)) {
prediction <- predict(random_forest[[i]], data)
prediction = round_df(prediction, 0)
print(prediction)
all_predictions <- cbind(all_predictions, prediction)
}
# print(all_predictions)
all_predictions = all_predictions[-1]
# print(all_predictions)
# print(all_predictions)
predicted_class = apply(all_predictions, 1, function(x) names(which.max(table(x))))
# print(predicted_class)
# print(typeof(predicted_class))
data_to_return <- cbind(data, predicted_class)
if(isClassification) {
data_to_return$predicted_class <- levelList[data_to_return$predicted_class]
}
data_to_return
}
rf <- rpartRF(data_train, targ, preds, 1, ntrees, 0, 10, 3, 10)
levelList <- levels(all_data$MaritalStatus)
data_with_pred = predictRF(rf, data_test, TRUE, levelList)
predictRF <- function(random_forest, data, isClassification, levelList) {
# random_forest : list of trees to predict target
# data : data to do prediction on
# isClassyfication  : if target is class or distinct
all_predictions <- c(data[1])
for(i in 1:length(random_forest)) {
prediction <- predict(random_forest[[i]], data)
prediction <- round_df(prediction, 0)
print(prediction)
all_predictions <- cbind(all_predictions, prediction)
}
# print(all_predictions)
all_predictions <- all_predictions[-1]
# print(all_predictions)
# print(all_predictions)
predicted_class <- apply(all_predictions, 1, function(x) names(which.max(table(x))))
# print(predicted_class)
# print(typeof(predicted_class))
data_to_return <- cbind(data, predicted_class)
if(isClassification) {
data_to_return$predicted_class <- levelList[data_to_return$predicted_class]
}
data_to_return
}
percent = 0.8
data_file = "Fifa.csv"
all_data = read.csv(data_file, header = TRUE)
count = dim(all_data)[1]
s <-sample(count, floor(count * percent))
data_train <- all_data[s,]
data_test <- all_data[-s,]
targ <- "Overall"
colnames(all_data)
preds <- c("ID", "Name","Age","Nationality","Potential","Club","Value",
"Wage","Special","Preferred.Foot","International.Reputation","Weak.Foot","Skill.Moves","Work.Rate","Body.Type",
"Real.Face"      , "Position"            ,"Jersey.Number","Joined"       ,
"Loaned.From"    , "Contract.Valid.Until","Height"       ,"Weight"       ,
"LS"             , "ST"                  ,"RS"           ,"LW"           ,
"LF"             , "CF"                  ,"RF"           ,"RW"           ,
"LAM"            , "CAM"                 ,"RAM"          ,"LM"           ,
"LCM"            , "CM"                  ,"RCM"          ,"RM"           ,
"LWB"            , "LDM"                 ,"CDM"          ,"RDM"          ,
"RWB"            , "LB"                  ,"LCB"          ,"CB"           ,
"RCB"            , "RB"                  ,"Crossing"     ,"Finishing"    ,
"HeadingAccuracy", "ShortPassing"        ,"Volleys"      ,"Dribbling"    ,
"Curve"          , "FKAccuracy"          ,"LongPassing"  ,"BallControl"  ,
"Acceleration"   , "SprintSpeed"         ,"Agility"      ,"Reactions"    ,
"Balance"        , "ShotPower"           ,"Jumping"      ,"Stamina"      ,
"Strength"       , "LongShots"           ,"Aggression"   ,"Interceptions",
"Positioning"    , "Vision"              ,"Penalties"    ,"Composure"    ,
"Marking"        , "StandingTackle"      ,"SlidingTackle","GKDiving"     ,
"GKHandling"     , "GKKicking"           ,"GKPositioning","GKReflexes"   ,
"Release.Clause" )
ntrees <- 1
targ <- "Overall"
rf <- rpartRF(data_train, targ, preds, 0.3, 1, ntrees, 0, 10, 3, 30, FALSE)
rf <- rpartRF(data_train, targ, preds, 0.3, ntrees, 0, 10, 3, 30)
data_with_pred = predictRF(rf, data_test, FALSE)
rpartRF <- function(dataset, target, predictor_names, percent_predictors, percent_obs ,num_trees,
complex_param, min_split, min_bucket, max_depth, obs_weights) {
# dataset : data to create tree
# target : attribute to predict
# predictor_names : attribute names used to predict target
# percent_predictors : percent of user predictors per tree
# num_trees : number of trees in forest
# complex_param : cp param in rpart
# min_split : minsplit param in rpart
# min_bucket : minbucket param in rpart
# max_depth: maxdepth param in rpart
# init empty forest
# rforest <- list()
#
# #create trees
# for(i in 1:num_trees) {
#   # choose columns to build a tree
#   tree_predictors <- sample(predictor_names, length(predictor_names) * percent_predictors, replace = FALSE)
#   # set controls to tree
#   t_control <- rpart.control(minsplit = min_split, minbucket = min_bucket,cp = complex_param, maxdepth = max_depth)
#   # set user written split methods
#   alist <- list(init= anova_init, split=anova_split, eval=anova_eval)
#   # build a tree
#   tree <- rpart(formula = dataset[,target] ~ ., data = dataset[,tree_predictors], control = t_control, model=TRUE, method=alist)
#   # add tree to forest
#   rforest[[i]] <- tree
# }
# # return forest
# rforest
if(missing(obs_weights)) {
obs_weights <- rep(1, nrow(dataset))
}
# stick the weights to the dataset
dataset <- cbind(dataset, obs_weights)
# an empty list for our trees
rforest <- list()
# build trees
for(i in 1:num_trees) {
# take a percent_predictors sample of the predictors
tree_predictors <- sample(predictor_names, length(predictor_names) * percent_predictors, replace = FALSE)
# tree_predictors
# take a sample of the observations (not stratified over class)
in_bag <- apply(dataset, MARGIN = 1, FUN = function(v) ifelse(runif(n = 1, min = 0, max = 1) <= percent_obs, 1, 0))
# in_bag
ds <- cbind(dataset, in_bag)
# ds
# which observations are in bag
in_bag <- which(ds$in_bag == 1)
# which observations are out of bag
out_bag <- which(ds$in_bag == 0)
# in_bag
ds[in_bag, target]
# set the rpart.control object
t_control <- rpart.control(minsplit = min_split, minbucket = min_bucket, cp = complex_param, maxdepth = max_depth)
# build a tree
tree <- rpart(formula = ds[in_bag,target] ~ ., data = ds[in_bag,tree_predictors], weights = ds[in_bag,"obs_weights"], control = t_control, model=TRUE)
# rpart.plot(tree)
# add our tree to the forest
rforest[[i]] <- tree
}
# return our list of trees
return(rforest)
}
rf <- rpartRF(data_train, targ, preds, 1, 1, ntrees, 0, 10, 3, 10)
percent = 0.8
data_file = "MartialStatus.csv"
all_data = read.csv(data_file, header = TRUE)
count = dim(all_data)[1]
s <-sample(count, floor(count * percent))
data_train <- all_data[s,]
data_test <- all_data[-s,]
targ <- "MaritalStatus"
preds <- c("ď.żAge","Attrition" ,"BusinessTravel","DailyRate","Department" ,"DistanceFromHome",
"Education","EducationField", "EmployeeCount", "EmployeeNumber", "EnvironmentSatisfaction",  "Gender"  ,
"HourlyRate","JobInvolvement","JobLevel", "JobRole", "JobSatisfaction", "MonthlyIncome", "MonthlyRate"   ,           "NumCompaniesWorked" ,
"Over18", "OverTime", "PercentSalaryHike", "PerformanceRating", "RelationshipSatisfaction", "StandardHours",
"StockOptionLevel", "TotalWorkingYears", "TrainingTimesLastYear", "WorkLifeBalance", "YearsAtCompany" ,          "YearsInCurrentRole",
"YearsSinceLastPromotion","YearsWithCurrManager")
# preds <- c("ď.żAge","Attrition" ,"BusinessTravel","DailyRate","Department")
ntrees <- 2
rf <- rpartRF(data_train, targ, preds, 1, 1, ntrees, 0, 10, 3, 10)
levelList <- levels(all_data$MaritalStatus)
data_with_pred = predictRF(rf, data_test, TRUE, levelList)
